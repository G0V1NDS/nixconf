#!/bin/bash
# This script will create default session and windows for tmux
# Requires JQ, json processor, https://github.com/stedolan/jq

# Create a JSON like this and pass it as input
# ```json
# {
#   "sessions": {
#     "Notes": {
#       "windows": {
#         "Work": "cd $VIMWIKI_DIR_WORK",
#         "Personal": "cd $VIMWIKI_DIR_PERSONAL",
#         "Discussions": "cd $VIMWIKI_DIR_DISCUSSIONS"
#       },
#       "icon": ""
#     },
#     "Scratchpad": {
#       "windows": {
#         "Dot": "cd $MY_DOTFILES_DIR",
#         "Nvim": "cd $MY_DOTFILES_DIR/.config/nvim"
#       },
#       "icon": ""
#     }
#   }
# }
# ```

session_template_path="$TMUX_DEFAULT_SESSION_FILE"
cmd_completion_timeout=0.3
window_creation_timeout=0.001
pre_save_timeout=2

# Sopping tmux existing session and deleting the stored the session in ressurect directory
if [[ -f "$XDG_DATA_HOME/tmux/resurrect/last" ]]; then
    echo -e "Removing existing tmux session..." >&2
    killall tmux;
    rm -r "$XDG_DATA_HOME/tmux/resurrect/";
fi

session_data=$(cat < "${session_template_path}" | jq -r '.sessions')
session_names=($(echo "${session_data}" | jq -r 'keys_unsorted[]'))
existing_sessions=$(tmux list-sessions -F "#{session_name}" 2>/dev/null)


# tmux start-server
for ((s = 0; s < ${#session_names[@]}; ++s));
do
    session_name="${session_names[${s}]}"
    session_icon=$(echo "${session_data}" | jq -r ".${session_name} | .icon")
    echo -e "\n\ns: ${s}, session_name: ${session_icon} ${session_name}\n" >&2
    windows_data=$(echo "${session_data}" | jq -r ".${session_name} | .windows")
    window_names=($(echo "${windows_data}" | jq -r "keys_unsorted[]"))
    first_window=${window_names[0]}
    first_window_commands=$(echo "${windows_data}" | jq -r ".${first_window}")

    if [[ $(echo -e "${existing_sessions}" | grep "${session_icon}") ]]; then
        echo -e "Session with name ${session_icon} ${session_name} already exist" >&2
    else
        echo -e "Creating new session: ${session_icon} ${session_name} and window ${first_window}" >&2
        echo -e "Commands: ${first_window_commands}\n" >&2
        tmux new-session -d -s "${session_icon}" -n "${first_window}";
        while ! tmux has-session -t "${session_icon}"; do sleep $window_creation_timeout; done
        tmux send-keys -t "${session_icon}":"${first_window}" "${first_window_commands}" ENTER; sleep $cmd_completion_timeout;
    fi

    existing_windows=$(tmux list-windows -t "${session_icon}" -F "#{window_name}")

    for ((w = 1; w < ${#window_names[@]}; ++w));
    do
        window_name="${window_names[${w}]}"
        if [[ $(echo -e "${existing_windows}" | grep "${window_name}") ]]; then
            echo -e "Window with name ${window_name} already exist" >&2
        else
            echo -e "Creating new window: ${window_name}" >&2
            commands=$(echo "${windows_data}" | jq -r ".${window_name}")
            echo -e "Commands: ${commands}\n" >&2
            tmux new-window -n  "${window_name}" -t "${session_icon}";
            tmux send-keys -t "${session_icon}":"${window_name}" "${commands}" ENTER; sleep $cmd_completion_timeout;
        fi
    done
done

# Saving the session with tmux-resurrect
if [[ -f "$XDG_CONFIG_HOME/tmux/plugins/tmux-resurrect/scripts/save.sh" ]]; then
    echo -e "Saving the session with tmux-ressurect..." >&2
    echo -e "Waiting for $pre_save_timeout seconds" >&2
    sleep $pre_save_timeout;
    sh "$XDG_CONFIG_HOME/tmux/plugins/tmux-resurrect/scripts/save.sh"
fi
